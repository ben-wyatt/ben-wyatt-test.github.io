<!DOCTYPE html>
<html lang="en" class="{{ theme | default('light') }}">
<head>
  <meta name="color-scheme" content="light dark">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title or "Ben Wyatt" }}</title>
  <link rel="stylesheet" href="/styles/main.css">
  {% if not collections or true %}
  <!-- Client-side Prism fallback when Shiki is not installed -->
  <link rel="stylesheet" href="https://unpkg.com/prismjs@1.29.0/themes/prism.css">
  <link rel="stylesheet" href="https://unpkg.com/prismjs@1.29.0/themes/prism-okaidia.css" media="(prefers-color-scheme: dark)">
  <script defer src="https://unpkg.com/prismjs@1.29.0/components/prism-core.min.js"></script>
  <script defer src="https://unpkg.com/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js" data-autoloader-path="https://unpkg.com/prismjs@1.29.0/components/"></script>
  {% endif %}
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;700&display=swap" rel="stylesheet">
</head>
<body data-theme="">
  <header>
    <nav style="display: flex; align-items: center; justify-content: center; flex-wrap: wrap; gap: 0.25rem;">
      <a href="/" style="margin-right: 0.5rem;">Home</a>
      <span style="margin: 0 0.5rem;">|</span>
      <a href="/blog/" style="margin-left: 0.5rem;">Blog</a>
      <span style="margin: 0 0.5rem;">|</span>
      <button id="theme-toggle" aria-label="Toggle Theme" style="margin-left: 0.5rem;">ðŸŒ“</button>
    </nav>
  </header>
  <main>
    {{ content | safe }}
  </main>
  <footer>
    <p>Â© <span id="year-egg">{{ now | date("yyyy") }}</span> Ben Wyatt</p>
  </footer>
  <script>
    const toggle = document.getElementById('theme-toggle');
    const root = document.documentElement;
    const storedTheme = localStorage.getItem('theme');
    const picker = null; // palette picker removed (easter egg remains)
    const storedPalette = localStorage.getItem('palette') || 'indigo';

    function applyTheme(theme) {
      root.setAttribute('data-theme', theme);
      root.classList.remove('light', 'dark');
      root.classList.add(theme);
    }
    function applyPalette(palette) {
      root.setAttribute('data-palette', palette);
    }

    if (storedTheme) {
      applyTheme(storedTheme);
    } else {
      let theme;
      try {
        if (window.matchMedia) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
      } catch (e) {}
      if (!theme) theme = 'dark'; // Default to dark if detection fails
      applyTheme(theme);
    }
    applyPalette(storedPalette);

    // Hidden palette cycler (5 clicks on footer year within ~1.2s)
    (function() {
      const egg = document.getElementById('year-egg');
      if (!egg) return;
      const palettes = ['indigo','forest','amber','rose','teal','purple'];
      let clickCount = 0;
      let clickTimer = null;
      const WINDOW_MS = 1200;

      function nextPalette() {
        const current = root.getAttribute('data-palette') || 'indigo';
        const idx = palettes.indexOf(current);
        const next = palettes[(idx + 1) % palettes.length];
        applyPalette(next);
        localStorage.setItem('palette', next);
      }

      function resetClicks() {
        clickCount = 0;
        if (clickTimer) {
          clearTimeout(clickTimer);
          clickTimer = null;
        }
      }

      egg.addEventListener('click', () => {
        clickCount += 1;
        if (!clickTimer) clickTimer = setTimeout(resetClicks, WINDOW_MS);
        if (clickCount >= 5) {
          nextPalette();
          resetClicks();
        }
      });
    })();

    toggle.addEventListener('click', () => {
      const currentTheme = root.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      applyTheme(newTheme);
      localStorage.setItem('theme', newTheme);
    });

    // no visible palette picker; switching is via hidden easter egg

    // Auto-update on system theme change if no manual override is set
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
      if (!localStorage.getItem('theme')) {
        applyTheme(e.matches ? 'dark' : 'light');
      }
    });
    
    // Instant jumps for in-page anchor links
    (function() {
      const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      const DURATION_MS = 0; // instant

      function smoothScrollTo(targetY, duration) {
        const startY = window.pageYOffset;
        const distance = targetY - startY;
        if (distance === 0 || duration <= 0) {
          window.scrollTo(0, targetY);
          return;
        }
        let startTime = null;
        const easeOutQuad = t => t * (2 - t);
        function step(timestamp) {
          if (!startTime) startTime = timestamp;
          const elapsed = timestamp - startTime;
          const progress = Math.min(elapsed / duration, 1);
          const eased = easeOutQuad(progress);
          window.scrollTo(0, Math.round(startY + distance * eased));
          if (elapsed < duration) requestAnimationFrame(step);
        }
        requestAnimationFrame(step);
      }

      function onAnchorClick(event) {
        const href = event.currentTarget.getAttribute('href');
        if (!href || !href.startsWith('#')) return;
        const id = decodeURIComponent(href.slice(1));
        const target = id ? document.getElementById(id) : null;
        if (!target) return;
        event.preventDefault();
        if (prefersReduced) {
          target.scrollIntoView();
          return;
        }
        const rect = target.getBoundingClientRect();
        const targetY = Math.max(0, rect.top + window.pageYOffset);
        smoothScrollTo(targetY, DURATION_MS);
        try {
          history.replaceState(null, '', href);
        } catch (e) {}
        try {
          target.focus({ preventScroll: true });
        } catch (e) {}
      }

      document.addEventListener('DOMContentLoaded', () => {
        const links = document.querySelectorAll('a[href^="#"]');
        for (const link of links) link.addEventListener('click', onAnchorClick);
      });
    })();

    // Code block language badge + copy-to-clipboard (Obsidian-style)
    (function() {
      function getLanguageName(pre, code) {
        // Shiki sometimes exposes data-language or data-lang
        const shikiLang = pre.getAttribute('data-language') || pre.getAttribute('data-lang');
        if (shikiLang) return shikiLang;

        // Prism/markdown-it add classes like language-python
        const classes = (pre.className + ' ' + code.className).split(/\s+/);
        for (const cls of classes) {
          const match = /^language-(.+)$/i.exec(cls);
          if (match) return match[1];
        }
        return '';
      }

      function labelForLanguage(raw) {
        const value = (raw || '').toLowerCase();
        if (!value) return '';

        // Common overrides and aliases
        const overrides = {
          // JavaScript family
          'javascript': 'JavaScript',
          'js': 'JavaScript',
          'jsx': 'JSX',
          'node': 'JavaScript',
          // TypeScript
          'typescript': 'TypeScript',
          'ts': 'TypeScript',
          'tsx': 'TSX',
          // Data/serializations
          'json': 'JSON',
          'yaml': 'YAML',
          'yml': 'YAML',
          'toml': 'TOML',
          'ini': 'INI',
          // Shells
          'bash': 'Bash',
          'sh': 'Shell',
          'shell': 'Shell',
          'zsh': 'Zsh',
          'powershell': 'PowerShell',
          'ps1': 'PowerShell',
          // Markup & styles
          'html': 'HTML',
          'xml': 'XML',
          'css': 'CSS',
          'markdown': 'Markdown',
          'md': 'Markdown',
          // VCS / diffs
          'diff': 'diff',
          'git': 'Git',
          // Popular languages
          'python': 'Python',
          'py': 'Python',
          'java': 'Java',
          'kotlin': 'Kotlin',
          'swift': 'Swift',
          'go': 'Go',
          'golang': 'Go',
          'rust': 'Rust',
          'rs': 'Rust',
          'ruby': 'Ruby',
          'rb': 'Ruby',
          'php': 'PHP',
          'csharp': 'C#',
          'cs': 'C#',
          'cpp': 'C++',
          'c++': 'C++',
          'c': 'C',
          'sql': 'SQL',
          // Misc
          'dockerfile': 'Dockerfile',
          'docker': 'Dockerfile',
          'regex': 'Regex',
          'plaintext': 'Text',
          'text': 'Text',
          'txt': 'Text'
        };

        if (overrides[value]) return overrides[value];

        // Default: capitalize first letter only
        return value.charAt(0).toUpperCase() + value.slice(1);
      }

      function createCopyButton(langLabel, codeEl) {
        const btn = document.createElement('button');
        btn.className = 'code-copy-button';
        btn.type = 'button';
        const pretty = labelForLanguage(langLabel);
        btn.textContent = pretty || 'Copy';
        btn.setAttribute('aria-label', 'Copy code');
        btn.title = 'Copy code';
        btn.addEventListener('click', async () => {
          const text = codeEl.innerText.replace(/\n+$/,'');
          try {
            if (navigator.clipboard && navigator.clipboard.writeText) {
              await navigator.clipboard.writeText(text);
            } else {
              // Fallback: hidden textarea
              const textarea = document.createElement('textarea');
              textarea.value = text;
              textarea.setAttribute('readonly', '');
              textarea.style.position = 'absolute';
              textarea.style.left = '-9999px';
              document.body.appendChild(textarea);
              textarea.select();
              document.execCommand('copy');
              document.body.removeChild(textarea);
            }
            const original = btn.textContent;
            btn.textContent = 'Copied';
            btn.classList.add('copied');
            setTimeout(() => {
              btn.textContent = original;
              btn.classList.remove('copied');
            }, 1400);
          } catch (e) {}
        });
        return btn;
      }

      function enhanceAllCodeBlocks() {
        const pres = document.querySelectorAll('pre');
        for (const pre of pres) {
          if (pre.classList.contains('has-copy-button')) continue;
          const code = pre.querySelector('code');
          if (!code) continue;
          const lang = getLanguageName(pre, code);
          const btn = createCopyButton(lang, code);
          pre.classList.add('has-copy-button');
          pre.appendChild(btn);
        }
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', enhanceAllCodeBlocks);
      } else {
        enhanceAllCodeBlocks();
      }
    })();
  </script>
</body>
</html>
